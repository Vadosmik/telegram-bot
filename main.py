import os
import time
import psycopg2
from flask import Flask, request
from dotenv import load_dotenv
import telebot
from telebot import types

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_URL = os.getenv("DATABASE_URL")
conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS votes (
    id SERIAL PRIMARY KEY,
    username TEXT,
    user_id BIGINT UNIQUE,
    voted_for TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS settings (
    id SERIAL PRIMARY KEY,
    key TEXT UNIQUE,
    value TEXT
);
""")
conn.commit()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤
ADMIN_ID = int(os.getenv("ADMIN_ID"))
maks_id = int(os.getenv("maks_id"))
vadim_id = int(os.getenv("vadim_id"))

# –°–æ—Å—Ç–æ—è–Ω–∏—è
user_state = {}
answer_targets = {}
contest_status = False
votes_status = False

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

# --- Flask —Ä–æ—É—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ ---
@app.route('/', methods=['POST'])
def webhook():
    json_str = request.get_data().decode('UTF-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return '!', 200

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
@bot.message_handler(commands=['start'])
def start_handler(message):
    chat_id = message.chat.id
    if chat_id in [ADMIN_ID, vadim_id]:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        buttons = [
            'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É',
            'üèÅ –í–∫–ª/–≤—ã–∫–ª –∫–æ–Ω–∫—É—Ä—Å', 'üó≥Ô∏è –í–∫–ª/–≤—ã–∫–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
            'üî¢ –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', 'üé® –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å'
        ]
        markup.add(*[types.KeyboardButton(btn) for btn in buttons])
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë", reply_markup=markup)
    else:
        markup = types.InlineKeyboardMarkup()
        if contest_status:
            markup.add(types.InlineKeyboardButton('üé® –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ', callback_data='add'))
        if votes_status:
            markup.add(types.InlineKeyboardButton('üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='vote'))
        if not contest_status and not votes_status:
            markup.add(types.InlineKeyboardButton('üëã –ø—Ä–∏–≤–µ—Ç', callback_data='hi'))
        bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∫–∞–Ω–∞–ª–∞ Ally Books! üìö‚ú®", reply_markup=markup)

@bot.message_handler(commands=['me'])
def send_my_id(message):
    user = message.from_user
    bot.send_message(
        message.chat.id,
        f"üë§ –ò–º—è: {user.first_name}\n"
        f"üîπ Username: @{user.username or '–±–µ–∑ username'}\n"
        f"üÜî Telegram ID: {user.id}\n"
        f"üí¨ Chat ID: {message.chat.id}"
    )

@bot.message_handler(commands=['call_max'])
def call_max(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üëã –ø—Ä–∏–≤–µ—Ç", callback_data='hi'))
    markup.add(types.InlineKeyboardButton("XXX", callback_data='xxx'))
    bot.send_message(message.chat.id,
        "üì¢ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —à—É—Ç–æ–∫ –Ω–∞–¥ @una_max. –í—ã–±–µ—Ä–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['offer'])
def offer_message(message):
    user_state[message.chat.id] = 'awaiting_offer'
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")

@bot.message_handler(commands=['status'])
def vote_status(message):
    cursor.execute("SELECT voted_for, COUNT(*) FROM votes GROUP BY voted_for ORDER BY COUNT(*) DESC LIMIT 5")
    top = cursor.fetchall()
    if not top:
        bot.send_message(message.chat.id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.")
    else:
        stats = "Top 5 –≥–æ–ª–æ—Å–æ–≤:\n" + "\n".join(f"–∑–∞—è–≤–∫–∞ ‚Ññ{vote}: {count} –≥–æ–ª–æ—Å–æ–≤" for vote, count in top)
        bot.send_message(message.chat.id, stats)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∞ ---
@bot.message_handler(func=lambda message: message.chat.id == ADMIN_ID and message.text)
def admin_panel(message):
    global contest_status, votes_status
    text = message.text
    if text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
        vote_status(message)
    elif text == 'üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É':
        cursor.execute("DELETE FROM votes")
        conn.commit()
        bot.send_message(message.chat.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞.")
    elif text == 'üèÅ –í–∫–ª/–≤—ã–∫–ª –∫–æ–Ω–∫—É—Ä—Å':
        contest_status = not contest_status
        bot.send_message(message.chat.id, f"–ö–æ–Ω–∫—É—Ä—Å {'–≤–∫–ª—é—á—ë–Ω' if contest_status else '–≤—ã–∫–ª—é—á–µ–Ω'}.")
    elif text == 'üó≥Ô∏è –í–∫–ª/–≤—ã–∫–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ':
        votes_status = not votes_status
        bot.send_message(message.chat.id, f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ {'–≤–∫–ª—é—á–µ–Ω–æ' if votes_status else '–≤—ã–∫–ª—é—á–µ–Ω–æ'}.")
    elif text == 'üî¢ –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤':
        cursor.execute("SELECT COUNT(DISTINCT voted_for) FROM votes")
        count = cursor.fetchone()[0]
        bot.send_message(message.chat.id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}")
    elif text == 'üé® –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å':
        start_handler(message)
    elif text == 'üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å':
        start_handler(message)

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–ª–±–µ–∫–æ–≤ ---
@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    chat_id = call.message.chat.id
    user_id = call.from_user.id
    data = call.data

    if data == 'start':
        start_handler(call.message)
    elif data == 'vote':
        user_state[chat_id] = 'awaiting_vote'
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è —Ä–∞–±–æ—Ç—ã.")
    elif data == 'add':
        user_state[chat_id] = 'awaiting_agree'
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree'))
        bot.send_message(chat_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è.", reply_markup=markup)
    elif data == 'agree':
        user_state[chat_id] = 'awaiting_project'
        bot.send_message(chat_id, "üìå –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∞–º –ø—Ä–æ–µ–∫—Ç.")
    elif data == 'hi':
        bot.send_message(maks_id, "–ü—Ä–∏–≤–µ—Ç–∏–∫")
    elif data == 'xxx':
        bot.send_message(maks_id, "—è —Ç–µ–±—è —Ç—Ä–∞—Ö–Ω—É!!")
    elif data == 'clear':
        cursor.execute("DELETE FROM votes")
        conn.commit()
        bot.send_message(chat_id, "–í—Å–µ –≥–æ–ª–æ—Å–∞ —É–¥–∞–ª–µ–Ω—ã.")
    elif data.startswith('approve_'):
        target_id = int(data.split('_')[1])
        bot.send_message(target_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        bot.send_message(ADMIN_ID, "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    elif data.startswith('text_'):
        target_id = int(data.split('_')[1])
        answer_targets[user_id] = target_id
        user_state[user_id] = 'awaiting_text_for_answer'
        bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@bot.message_handler(func=lambda message: True)
def all_messages(message):
    chat_id = message.chat.id
    state = user_state.get(chat_id)

    if state == 'awaiting_offer':
        bot.send_message(ADMIN_ID, f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {message.text}")
        user_state.pop(chat_id)
        bot.send_message(chat_id, "‚úÖ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    elif state == 'awaiting_project':
        bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –æ—Ç {chat_id}:")
        bot.forward_message(ADMIN_ID, chat_id, message.message_id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{chat_id}"))
        bot.send_message(ADMIN_ID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
        user_state.pop(chat_id)
    elif state == 'awaiting_vote':
        try:
            vote = int(message.text)
            cursor.execute("INSERT INTO votes (username, user_id, voted_for) VALUES (%s, %s, %s) ON CONFLICT (user_id) DO UPDATE SET voted_for = EXCLUDED.voted_for",
                           (message.from_user.username, message.from_user.id, vote))
            conn.commit()
            bot.send_message(chat_id, "‚úÖ –í–∞—à –≥–æ–ª–æ—Å –ø—Ä–∏–Ω—è—Ç!")
            user_state.pop(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ùó –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
    elif state == 'awaiting_text_for_answer':
        target_id = answer_targets.pop(chat_id, None)
        if target_id:
            bot.send_message(target_id, message.text)
            bot.send_message(chat_id, "‚úÖ –¢–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            user_state.pop(chat_id)

## =============================      ============================= ##

@bot.message_handler(content_types=['text', 'photo', 'video', 'document'])
def message_handler(message):
  chat_id = message.chat.id
  user_id = vadim_id
  state = user_state.get(chat_id)

  if state == 'awaiting_offer':
    bot.send_message(chat_id, "‚ùó —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.")
    bot.send_message(user_id, message.text)

  elif state == 'awaiting_number_of_contestants':
    max_vote = int(message.text)
    set_max_vote(max_vote)
    bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_vote}")

  elif state == 'awaiting_project':
    if chat_id not in user_data:
      user_data[chat_id] = {}

    if message.content_type == 'text' and message.text.startswith("http"):
      user_data[chat_id]['project'] = message.text
      user_data[chat_id]['type'] = 'link'
      bot.send_message(chat_id, "‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –º–æ–Ω—Ç–∞–∂–Ω–æ–π/—Ä–∞–±–æ—á–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
      user_state[chat_id] = 'awaiting_screenshot'

    elif message.content_type in ['photo', 'video', 'document']:
      if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
      elif message.content_type == 'video':
        file_id = message.video.file_id
      else:
        file_id = message.document.file_id
      user_data[chat_id]['project'] = file_id
      user_data[chat_id]['type'] = message.content_type
      bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω!\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –º–æ–Ω—Ç–∞–∂–Ω–æ–π/—Ä–∞–±–æ—á–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
      user_state[chat_id] = 'awaiting_screenshot'
    else:
      bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É, —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

  elif state == 'awaiting_screenshot':
    if message.content_type in ['photo', 'video', 'document']:
      if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
      elif message.content_type == 'video':
        file_id = message.video.file_id
      else:
        file_id = message.document.file_id

      user_data[chat_id]['screenshot'] = file_id
      user_data[chat_id]['screenshot_type'] = message.content_type

      bot.send_message(chat_id, "üì© –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. ‚è≥\n(–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")

      # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
      user = message.from_user
      if user.username:
        display_name = f"@{user.username}"
      else:
        display_name = f"{user.first_name} (id: {user.id})"
      

      approve_markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
      btn2 = types.InlineKeyboardButton("‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"approve_{chat_id}")
      approve_markup.add(btn1)
      approve_markup.add(btn2)

      bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞: {display_name}")

      # –ü—Ä–æ–µ–∫—Ç
      if user_data[chat_id]['type'] == 'link':
        bot.send_message(ADMIN_ID, f"üîó –ü—Ä–æ–µ–∫—Ç: {user_data[chat_id]['project']}")
      else:
        bot.send_message(ADMIN_ID, "üìå –ü—Ä–æ–µ–∫—Ç:")
        p_type = user_data[chat_id]['type']
        p_id = user_data[chat_id]['project']
        if p_type == 'photo':
          bot.send_photo(ADMIN_ID, p_id)
        elif p_type == 'video':
          bot.send_video(ADMIN_ID, p_id)
        elif p_type == 'document':
          bot.send_document(ADMIN_ID, p_id)

      # –°–∫—Ä–∏–Ω—à–æ—Ç
      bot.send_message(ADMIN_ID, "üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç:")
      s_type = user_data[chat_id]['screenshot_type']
      s_id = user_data[chat_id]['screenshot']
      if s_type == 'photo':
        bot.send_photo(ADMIN_ID, s_id, reply_markup=approve_markup)
      elif s_type == 'video':
        bot.send_video(ADMIN_ID, s_id, reply_markup=approve_markup)
      elif s_type == 'document':
        bot.send_document(ADMIN_ID, s_id, reply_markup=approve_markup)

      # –û—á–∏—Å—Ç–∫–∞
      user_state.pop(chat_id, None)
      user_data.pop(chat_id, None)
    else:
      bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
  
  elif state == 'awaiting_vote':
    user_id = chat_id
    user_vote = message.text.strip()
    username = message.from_user.username or "–±–µ–∑ username"
    max_vote = get_max_vote()

    if not user_vote.isdigit() or not (1 <= int(user_vote) <= int(max_vote)):
      bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –æ—Ç 1 –¥–æ {max_vote}.")
      return

    # sprawdzamy czy u≈ºytkownik ju≈º g≈Çosowa≈Ç
    cursor.execute("SELECT * FROM votes WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if result:
      markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='change_vote')
      btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='remove_vote')
      btn3 = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data='start')
      markup.add(btn1, btn2)
      markup.add(btn3)
      bot.send_message(chat_id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –≥–æ–ª–æ—Å.", reply_markup=markup)
      return

    # je≈õli nie g≈Çosowa≈Ç ‚Äì zapisujemy do bazy
    cursor.execute(
      "INSERT INTO votes (username, user_id, voted_for) VALUES (%s, %s, %s)",
      (username, user_id, user_vote)
    )
    conn.commit()

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='change_vote')
    btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='remove_vote')
    btn3 = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data='start')
    markup.add(btn1, btn2)
    markup.add(btn3)

    bot.send_message(chat_id, f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ —Ä–∞–±–æ—Ç—É ‚Ññ{user_vote} –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üó≥Ô∏è", reply_markup=markup)
    user_state.pop(chat_id, None)

  elif state == 'awaiting_text_for_answer':
    admin_id = message.from_user.id
    if message.content_type == 'text':
      user_chat_id = answer_targets.get(admin_id)
      if user_chat_id:
        markup = types.InlineKeyboardMarkup()

        if user_chat_id == ADMIN_ID:
          btn1 = types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
          markup.add(btn1)
        else:
          btn1 = types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
          btn2 = types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã—Å–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='agree')
          markup.add(btn1)
          markup.add(btn2)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å username, –∏–Ω–∞—á–µ –∏–º—è
        sender = message.from_user.username
        if sender:
          sender_info = f"üë§ @{sender}"
        else:
          sender_info = f"üë§ {message.from_user.first_name}"

        
        if user_chat_id == ADMIN_ID:
          bot.send_message(user_chat_id, f"{sender_info}:\n{message.text}", reply_markup=markup)
          bot.send_message(admin_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        else:
          bot.send_message(user_chat_id, message.text, reply_markup=markup)
          bot.send_message(admin_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

      else:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
      bot.send_message(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")

    user_state.pop(admin_id, None)
    answer_targets.pop(admin_id, None)

def get_max_vote():
    cursor.execute("SELECT value FROM settings WHERE key = %s", ('max_vote',))
    result = cursor.fetchone()
    return int(result[0]) if result else 2  # Domy≈õlnie 2 g≈Çosy, je≈õli brak w bazie

def set_max_vote(value):
    cursor.execute("INSERT INTO settings (key, value) VALUES (%s, %s) ON CONFLICT (key) DO UPDATE SET value = %s", ('max_vote', value, value))
    conn.commit()

@app.route('/', methods=['GET'])
def index():
  return 'Bot is running!', 200

if __name__ == '__main__':
  app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))