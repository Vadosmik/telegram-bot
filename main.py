import time
import telebot
import os
import psycopg2
from telebot import types
from telebot.types import ReplyKeyboardMarkup
from collections import Counter
from dotenv import load_dotenv
from flask import Flask, request

load_dotenv()
app = Flask(__name__)

TOKEN = os.getenv("TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
maks_id = int(os.getenv("maks_id"))
vadim_id = int(os.getenv("vadim_id"))

bot = telebot.TeleBot(TOKEN)

conn = psycopg2.connect(DATABASE_URL, sslmode='require')
cursor = conn.cursor()

cursor.execute("""
  CREATE TABLE IF NOT EXISTS votes (
    id SERIAL PRIMARY KEY,
    username TEXT,
    user_id BIGINT UNIQUE,
    voted_for TEXT NOT NULL
  );
  CREATE TABLE IF NOT EXISTS settings (
  id SERIAL PRIMARY KEY,
  key TEXT UNIQUE,
  value TEXT
  );
""")
conn.commit()

WEBHOOK_URL = os.getenv("WEBHOOK_URL")
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=WEBHOOK_URL)

user_state = {}
user_data = {}

contest_status = False
votes_status = False

answer_targets = {}
max_vote = 2

@app.route('/', methods=['POST'])
def webhook():
  json_str = request.get_data().decode('UTF-8')
  update = telebot.types.Update.de_json(json_str)
  bot.process_new_updates([update])
  return '!', 200

@bot.message_handler(commands=['start'])
def start_handler(message):
  chat_id = message.chat.id

  if chat_id == ADMIN_ID or chat_id == vadim_id:
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False, row_width=2)

    admin_buttons = [
      types.KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
      types.KeyboardButton('üßπ –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
      types.KeyboardButton('üèÅ –í–∫–ª/–≤—ã–∫–ª –∫–æ–Ω–∫—É—Ä—Å'),
      types.KeyboardButton('üó≥Ô∏è –í–∫–ª/–≤—ã–∫–ª –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ'),
      types.KeyboardButton('üî¢ –ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'),
      types.KeyboardButton('üé® –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'),
      types.KeyboardButton('üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞—Ç—å')
    ]
    
    # Grupowanie przycisk√≥w
    markup.add(*admin_buttons[:2])
    markup.add(*admin_buttons[2:4])
    markup.add(admin_buttons[4])
    markup.add(admin_buttons[5], admin_buttons[6])

    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω! üëë", reply_markup=markup)
  else:
    markup = types.InlineKeyboardMarkup()

    if contest_status:
      btn1 = types.InlineKeyboardButton('üé® –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–æ–Ω–∫—É—Ä—Å–µ', callback_data='add')
      markup.add(btn1)
    if votes_status:
      btn2 = types.InlineKeyboardButton('üó≥Ô∏è –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', callback_data='vote')
      markup.add(btn2)
    if contest_status == False and votes_status == False:
      btn3 = types.InlineKeyboardButton("üëã –ø—Ä–∏–≤–µ—Ç", callback_data='hi')
      markup.add(btn3)

    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –±–æ—Ç–µ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ –∫–∞–Ω–∞–ª–∞ Ally Books! üìö‚ú®", reply_markup=markup)


@bot.message_handler(commands=['me'])
def send_my_id(message):
  user_id = message.from_user.id
  chat_id = message.chat.id
  username = message.from_user.username or "–±–µ–∑ username"
  name = message.from_user.first_name

  bot.send_message(chat_id,
    f"üë§ –ò–º—è: {name}\n"
    f"üîπ Username: @{username}\n"
    f"üÜî Telegram ID: {user_id}\n"
    f"üí¨ Chat ID: {chat_id}")
  
@bot.message_handler(commands=['call_max'])
def send_to_max_mess(message):
  chat_id = message.chat.id

  markup = types.InlineKeyboardMarkup()
  markup.add(types.InlineKeyboardButton("üëã –ø—Ä–∏–≤–µ—Ç", callback_data='hi'))
  markup.add(types.InlineKeyboardButton("XXX", callback_data='xxx'))

  bot.send_message(
    chat_id,
    "üì¢ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –Ω–µ–º–Ω–æ–≥–æ –ø–æ—à–∞–ª–∏—Ç—å –∏ –ø–æ–∑–ª–∏—Ç—å @una_max. "
    "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ–º—É –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n"
    "üî∏ –°–µ–π—á–∞—Å –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞, –Ω–æ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–∂–µ—Ç —Ä–∞—Å—à–∏—Ä–∏—Ç—å—Å—è.\n"
    "üî∏ –í –±—É–¥—É—â–µ–º —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ –º–µ–Ω—é ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ–π –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é.\n"
    "üî∏ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /offer.\n"
    "üî∏ –í—Å—ë –∞–±—Å–æ–ª—é—Ç–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ —É–∑–Ω–∞–µ—Ç, –∫—Ç–æ –Ω–∞–∂–∞–ª.\n\n"
    "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:",
    reply_markup=markup
  )
  
@bot.message_handler(commands=['offer'])
def send_offer(message):
  chat_id = message.chat.id
  user_state[chat_id] = 'awaiting_offer'
  
  bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å.")

@bot.message_handler(commands=['status'])
def send_vote_status(message):
  chat_id = message.chat.id

  cursor.execute("SELECT voted_for, COUNT(*) FROM votes GROUP BY voted_for ORDER BY COUNT(*) DESC LIMIT 5")
  top_votes = cursor.fetchall()

  if not top_votes:
    bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.")
    return
    
  stats_message = "Top 5 –≥–æ–ª–æ—Å–æ–≤:\n"
  for option, count in top_votes:
    stats_message += f"–∑–∞—è–≤–∫–∞ ‚Ññ{option}: {count} –≥–æ–ª–æ—Å–æ–≤\n"

  bot.send_message(chat_id, stats_message)


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
  chat_id = call.message.chat.id
  user_id = call.from_user.id
  global contest_status, votes_status

  actions = {
    'start': lambda: handle_start(call.message),
    'hi': lambda: bot.send_message(MAKS_ID, "–ø—Ä–∏–≤–µ—Ç–∏–∫"),
    'xxx': lambda: bot.send_message(MAKS_ID, "—è —Ç–µ–±—è —Ç—Ä–∞—Ö–Ω—É!!"),
    'vote_status': lambda: toggle_vote_status(chat_id),
    'contest_status': lambda: toggle_contest_status(chat_id),
    'add': lambda: prompt_agreement(chat_id),
    'agree': lambda: prompt_project_submission(chat_id),
    'vote': lambda: prompt_vote(chat_id),
    'clear': lambda: clear_votes(chat_id),
  }

  for prefix, func in actions.items():
    if call.data.startswith(prefix):
      func()
      return
  
  if call.data.startswith('approve_'):
    user_chat_id = int(call.data.split('_')[1])
    bot.send_message(user_chat_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!", reply_markup=types.InlineKeyboardMarkup().add(types.InlineKeyboardButton('üîô –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='start')))
    bot.send_message(ADMIN_ID, "‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

def toggle_vote_status(chat_id):
  global votes_status
  votes_status = not votes_status
  text = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!" if votes_status else "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å!"
  bot.send_message(chat_id, text)

def toggle_contest_status(chat_id):
  global contest_status
  contest_status = not contest_status
  text = "–ö–æ–Ω–∫—É—Ä—Å –Ω–∞—á–∞–ª—Å—è!" if contest_status else "–ö–æ–Ω–∫—É—Ä—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!"
  bot.send_message(chat_id, text)

def prompt_agreement(chat_id):
  user_state[chat_id] = 'awaiting_agree'
  markup = types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω", callback_data='agree'))
  bot.send_message(chat_id, "–ñ–º–∏ '–°–æ–≥–ª–∞—Å–µ–Ω' –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!", reply_markup=markup)

def prompt_project_submission(chat_id):
  user_state[chat_id] = 'awaiting_project'
  bot.send_message(chat_id, "üì© –ü—Ä–∏—à–ª–∏ —Å–≤–æ–π –ø—Ä–æ–µ–∫—Ç!")

def prompt_vote(chat_id):
  user_state[chat_id] = 'awaiting_vote'
  bot.send_message(chat_id, "üìä –û—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–π—Å—è —Ä–∞–±–æ—Ç—ã!")

def clear_votes(chat_id):
  db_execute("DELETE FROM votes")
  bot.send_message(chat_id, "–í—Å–µ –≥–æ–ª–æ—Å–∞ —É–¥–∞–ª–µ–Ω—ã.")

@bot.message_handler(content_types=['text', 'photo', 'video', 'document'])
def message_handler(message):
  chat_id = message.chat.id
  user_id = vadim_id
  state = user_state.get(chat_id)

  if state == 'awaiting_offer':
    bot.send_message(chat_id, "‚ùó —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É.")
    bot.send_message(user_id, message.text)

  elif state == 'awaiting_number_of_contestants':
    max_vote = int(message.text)
    set_max_vote(max_vote)
    bot.send_message(chat_id, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {max_vote}")

  elif state == 'awaiting_project':
    if chat_id not in user_data:
      user_data[chat_id] = {}

    if message.content_type == 'text' and message.text.startswith("http"):
      user_data[chat_id]['project'] = message.text
      user_data[chat_id]['type'] = 'link'
      bot.send_message(chat_id, "‚úÖ –°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –º–æ–Ω—Ç–∞–∂–Ω–æ–π/—Ä–∞–±–æ—á–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
      user_state[chat_id] = 'awaiting_screenshot'

    elif message.content_type in ['photo', 'video', 'document']:
      if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
      elif message.content_type == 'video':
        file_id = message.video.file_id
      else:
        file_id = message.document.file_id
      user_data[chat_id]['project'] = file_id
      user_data[chat_id]['type'] = message.content_type
      bot.send_message(chat_id, "‚úÖ –ü—Ä–æ–µ–∫—Ç –ø–æ–ª—É—á–µ–Ω!\nüì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –∏–∑ –º–æ–Ω—Ç–∞–∂–Ω–æ–π/—Ä–∞–±–æ—á–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã")
      user_state[chat_id] = 'awaiting_screenshot'
    else:
      bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É, —Ñ–∞–π–ª, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")

  elif state == 'awaiting_screenshot':
    if message.content_type in ['photo', 'video', 'document']:
      if message.content_type == 'photo':
        file_id = message.photo[-1].file_id
      elif message.content_type == 'video':
        file_id = message.video.file_id
      else:
        file_id = message.document.file_id

      user_data[chat_id]['screenshot'] = file_id
      user_data[chat_id]['screenshot_type'] = message.content_type

      bot.send_message(chat_id, "üì© –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. ‚è≥\n(–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)")

      # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
      user = message.from_user
      if user.username:
        display_name = f"@{user.username}"
      else:
        display_name = f"{user.first_name} (id: {user.id})"
      

      approve_markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
      btn2 = types.InlineKeyboardButton("‚úÖ –ó–∞—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"approve_{chat_id}")
      approve_markup.add(btn1)
      approve_markup.add(btn2)

      bot.send_message(ADMIN_ID, f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞: {display_name}")

      # –ü—Ä–æ–µ–∫—Ç
      if user_data[chat_id]['type'] == 'link':
        bot.send_message(ADMIN_ID, f"üîó –ü—Ä–æ–µ–∫—Ç: {user_data[chat_id]['project']}")
      else:
        bot.send_message(ADMIN_ID, "üìå –ü—Ä–æ–µ–∫—Ç:")
        p_type = user_data[chat_id]['type']
        p_id = user_data[chat_id]['project']
        if p_type == 'photo':
          bot.send_photo(ADMIN_ID, p_id)
        elif p_type == 'video':
          bot.send_video(ADMIN_ID, p_id)
        elif p_type == 'document':
          bot.send_document(ADMIN_ID, p_id)

      # –°–∫—Ä–∏–Ω—à–æ—Ç
      bot.send_message(ADMIN_ID, "üñºÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç:")
      s_type = user_data[chat_id]['screenshot_type']
      s_id = user_data[chat_id]['screenshot']
      if s_type == 'photo':
        bot.send_photo(ADMIN_ID, s_id, reply_markup=approve_markup)
      elif s_type == 'video':
        bot.send_video(ADMIN_ID, s_id, reply_markup=approve_markup)
      elif s_type == 'document':
        bot.send_document(ADMIN_ID, s_id, reply_markup=approve_markup)

      # –û—á–∏—Å—Ç–∫–∞
      user_state.pop(chat_id, None)
      user_data.pop(chat_id, None)
    else:
      bot.send_message(chat_id, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –≤–∏–¥–µ–æ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
  
  elif state == 'awaiting_vote':
    user_id = chat_id
    user_vote = message.text.strip()
    username = message.from_user.username or "–±–µ–∑ username"
    max_vote = get_max_vote()

    if not user_vote.isdigit() or not (1 <= int(user_vote) <= int(max_vote)):
      bot.send_message(chat_id, f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –æ—Ç 1 –¥–æ {max_vote}.")
      return

    # sprawdzamy czy u≈ºytkownik ju≈º g≈Çosowa≈Ç
    cursor.execute("SELECT * FROM votes WHERE user_id = %s", (user_id,))
    result = cursor.fetchone()

    if result:
      markup = types.InlineKeyboardMarkup()
      btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='change_vote')
      btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='remove_vote')
      btn3 = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data='start')
      markup.add(btn1, btn2)
      markup.add(btn3)
      bot.send_message(chat_id, "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏!\n–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤–∞—à –≥–æ–ª–æ—Å.", reply_markup=markup)
      return

    # je≈õli nie g≈Çosowa≈Ç ‚Äì zapisujemy do bazy
    cursor.execute(
      "INSERT INTO votes (username, user_id, voted_for) VALUES (%s, %s, %s)",
      (username, user_id, user_vote)
    )
    conn.commit()

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='change_vote')
    btn2 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å", callback_data='remove_vote')
    btn3 = types.InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ", callback_data='start')
    markup.add(btn1, btn2)
    markup.add(btn3)

    bot.send_message(chat_id, f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ —Ä–∞–±–æ—Ç—É ‚Ññ{user_vote} –ø—Ä–∏–Ω—è—Ç! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üó≥Ô∏è", reply_markup=markup)
    user_state.pop(chat_id, None)

  elif state == 'awaiting_text_for_answer':
    admin_id = message.from_user.id
    if message.content_type == 'text':
      user_chat_id = answer_targets.get(admin_id)
      if user_chat_id:
        markup = types.InlineKeyboardMarkup()

        if user_chat_id == ADMIN_ID:
          btn1 = types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
          markup.add(btn1)
        else:
          btn1 = types.InlineKeyboardButton("‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"text_{chat_id}")
          btn2 = types.InlineKeyboardButton("üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã—Å–ª–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data='agree')
          markup.add(btn1)
          markup.add(btn2)

        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å username, –∏–Ω–∞—á–µ –∏–º—è
        sender = message.from_user.username
        if sender:
          sender_info = f"üë§ @{sender}"
        else:
          sender_info = f"üë§ {message.from_user.first_name}"

        
        if user_chat_id == ADMIN_ID:
          bot.send_message(user_chat_id, f"{sender_info}:\n{message.text}", reply_markup=markup)
          bot.send_message(admin_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")
        else:
          bot.send_message(user_chat_id, message.text, reply_markup=markup)
          bot.send_message(admin_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úÖ")

      else:
        bot.send_message(admin_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
      bot.send_message(admin_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.")

    user_state.pop(admin_id, None)
    answer_targets.pop(admin_id, None)

def get_max_vote():
    cursor.execute("SELECT value FROM settings WHERE key = %s", ('max_vote',))
    result = cursor.fetchone()
    return int(result[0]) if result else 2  # Domy≈õlnie 2 g≈Çosy, je≈õli brak w bazie

def set_max_vote(value):
    cursor.execute("INSERT INTO settings (key, value) VALUES (%s, %s) ON CONFLICT (key) DO UPDATE SET value = %s", ('max_vote', value, value))
    conn.commit()

@app.route('/', methods=['GET'])
def index():
  return 'Bot is running!', 200

if __name__ == '__main__':
  app.run(host='0.0.0.0', port=int(os.environ.get("PORT", 5000)))